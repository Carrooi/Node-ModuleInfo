// Generated by CoffeeScript 1.9.2
(function() {
  var Finder, Info, escapeRegexp, fs, path;

  path = require('path');

  fs = require('fs');

  Finder = require('fs-finder');

  escapeRegexp = require('escape-regexp');

  Info = (function() {
    Info.prototype.dir = null;

    Info.prototype.data = null;

    function Info(dir1) {
      this.dir = dir1;
      this.dir = path.resolve(this.dir);
      if (!fs.existsSync(this.dir)) {
        throw new Error('Directory ' + this.dir + ' does not exists.');
      }
      if (!fs.statSync(this.dir).isDirectory()) {
        throw new Error('Path ' + this.dir + ' is not directory.');
      }
      if (!fs.existsSync(this.dir + '/package.json') || !fs.statSync(this.dir + '/package.json').isFile()) {
        throw new Error('package.json file was not found.');
      }
    }

    Info.fromFile = function(file) {
      var dir, pckg;
      pckg = Finder["in"](path.dirname(file)).lookUp().findFirst().findFiles('package.json');
      if (pckg === null) {
        throw new Error('File ' + file + ' is not in node module.');
      }
      dir = path.dirname(pckg);
      return new Info(dir);
    };

    Info.fromName = function(pmodule, name) {
      var dir, i, len, m, ref;
      ref = pmodule.paths;
      for (i = 0, len = ref.length; i < len; i++) {
        dir = ref[i];
        m = dir + '/' + name;
        if (fs.existsSync(m) && fs.statSync(m).isDirectory()) {
          return new Info(m);
        }
      }
      throw new Error('Module ' + name + ' was not found.');
    };

    Info.self = function(pmodule) {
      var pckg;
      pckg = Finder["in"](path.dirname(pmodule.filename)).lookUp().findFiles('package.json');
      if (pckg === null) {
        throw new Error('File ' + pmodule.filename + ' is not in module.');
      }
      return new Info(path.dirname(pckg));
    };

    Info.prototype.getPackagePath = function() {
      return this.dir + '/package.json';
    };

    Info.prototype.getData = function() {
      var info;
      if (this.data === null) {
        info = JSON.parse(fs.readFileSync(this.getPackagePath(), {
          encoding: 'utf8'
        }));
        if (typeof info.main === 'undefined') {
          if (fs.existsSync(this.dir + '/index.js')) {
            info.main = './index.js';
          } else {
            info.main = null;
          }
        }
        this.data = info;
      }
      return this.data;
    };

    Info.prototype.getPackageData = function() {
      return this.getData();
    };

    Info.prototype.getName = function() {
      return this.getData().name;
    };

    Info.prototype.getPath = function() {
      return this.dir;
    };

    Info.prototype.getModuleName = function(file, relative) {
      var _path;
      if (relative == null) {
        relative = false;
      }
      file = path.resolve(this.dir, file);
      if (!this.isFileInModule(file)) {
        throw new Error('File ' + file + ' is not in ' + this.getName() + ' module.');
      }
      if (!fs.existsSync(file)) {
        throw new Error('File ' + file + ' does not exists.');
      }
      if (!fs.statSync(file).isFile()) {
        throw new Error('Path ' + file + ' is not file.');
      }
      if (file === this.getMainFile() && !relative) {
        return this.getName();
      }
      _path = path.relative(this.dir, file);
      if (relative) {
        return _path;
      } else {
        return this.getName() + '/' + _path;
      }
    };

    Info.prototype.getVersion = function() {
      return this.getData().version;
    };

    Info.prototype.getMainFile = function() {
      var main;
      main = this.getData().main;
      if (main === null) {
        return null;
      } else {
        return require.resolve(this.dir + '/' + main);
      }
    };

    Info.prototype.isNpmDependency = function() {
      var test;
      test = escapeRegexp('/node_modules/' + this.getName());
      return this.dir.match(new RegExp(test)) !== null;
    };

    Info.prototype.isFileInModule = function(file) {
      var dir, match;
      file = path.resolve(this.dir, file);
      if (this.isNpmDependency()) {
        dir = escapeRegexp(this.dir);
        match = file.match(new RegExp('^' + dir + '\/(.*)$'));
        if (match === null) {
          return false;
        }
        if (match[1].match(/node_modules/) === null) {
          return true;
        }
      } else {
        if (file.match(/node_modules/) !== null) {
          return false;
        }
        dir = escapeRegexp(this.dir);
        if (file.match(new RegExp('^' + dir)) !== null) {
          return true;
        }
      }
      return false;
    };

    return Info;

  })();

  module.exports = Info;

}).call(this);
