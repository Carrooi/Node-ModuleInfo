// Generated by CoffeeScript 1.6.3
(function() {
  var Info, dir, expect, info, path;

  expect = require('chai').expect;

  path = require('path');

  Info = require('../../lib/Info');

  dir = path.normalize(__dirname + '/../data/test/node_modules');

  info = null;

  describe('Info', function() {
    describe('#constructor()', function() {
      it('should throw an error if directory does not exists', function() {
        return expect(function() {
          return new Info('unknown/directory');
        }).to["throw"](Error);
      });
      it('should throw an error if path is not directory', function() {
        return expect(function() {
          return new Info('./Info.coffee');
        }).to["throw"](Error);
      });
      return it('should throw an error if package.json does not exists', function() {
        return expect(function() {
          return new Info('../node_modules');
        }).to["throw"](Error);
      });
    });
    describe('#getPackagePath()', function() {
      return it('should return path to package.json file', function() {
        info = new Info(dir + '/simple');
        return expect(info.getPackagePath()).to.be.equal(dir + '/simple/package.json');
      });
    });
    describe('#getData()', function() {
      return it('should return json data from package.json file', function() {
        info = new Info(dir + '/simple');
        return expect(info.getData()).to.be.eql({
          name: 'simple',
          main: './index.js'
        });
      });
    });
    describe('#getName()', function() {
      return it('should return name of module', function() {
        info = new Info(dir + '/simple');
        return expect(info.getName()).to.be.equal('simple');
      });
    });
    describe('#getPath()', function() {
      return it('should return path to module directory', function() {
        info = new Info(dir + '/simple');
        return expect(info.getPath()).to.be.equal(dir + '/simple');
      });
    });
    describe('#getMainFile()', function() {
      it('should return path to main file', function() {
        info = new Info(dir + '/simple');
        return expect(info.getMainFile()).to.be.equal(dir + '/simple/index.js');
      });
      it('should return path to main file when it is not defined in package.json', function() {
        info = new Info(dir + '/no-main');
        return expect(info.getMainFile()).to.be.equal(dir + '/no-main/index.js');
      });
      return it('should return null when main file is not defined and index.js does not exists', function() {
        info = new Info(dir + '/no-main2');
        return expect(info.getMainFile()).to.be["null"];
      });
    });
    describe('#getModuleName()', function() {
      it('should throw an error if file is not placed in module', function() {
        info = new Info(dir + '/simple');
        return expect(function() {
          return info.getModuleName(dir + '/no-main/index.js');
        }).to["throw"](Error, 'File ' + dir + '/no-main/index.js is not in simple module.');
      });
      it('should throw an error if file does not exists', function() {
        info = new Info(dir + '/simple');
        return expect(function() {
          return info.getModuleName('unknown');
        }).to["throw"](Error);
      });
      it('should throw an error if path is not file', function() {
        info = new Info(dir + '/simple');
        return expect(function() {
          return info.getModuleName(dir + '/simple');
        }).to["throw"](Error);
      });
      it('should get name of module itself', function() {
        info = new Info(dir + '/simple');
        expect(info.getModuleName('index.js')).to.be.equal('simple');
        info = new Info(dir + '/advanced');
        return expect(info.getModuleName('dir/lib/index.js')).to.be.equal('advanced');
      });
      it('should get name of file in module for require method', function() {
        info = new Info(dir + '/advanced');
        return expect(info.getModuleName('dir/src/test/test.js')).to.be.equal('advanced/dir/src/test/test.js');
      });
      return it('should get name of file in module for absolute path', function() {
        info = new Info(dir + '/advanced');
        return expect(info.getModuleName(dir + '/advanced/dir/src/test/test.js')).to.be.equal('advanced/dir/src/test/test.js');
      });
    });
    describe('#isNpmDependency()', function() {
      it('should return true', function() {
        info = new Info(dir + '/simple');
        return expect(info.isNpmDependency()).to.be["true"];
      });
      return it('should return false', function() {
        info = new Info(path.resolve(dir + '/..'));
        return expect(info.isNpmDependency()).to.be["false"];
      });
    });
    return describe('#isFileInModule()', function() {
      it('should return true for non npm module file', function() {
        info = new Info(path.resolve(dir + '/..'));
        return expect(info.isFileInModule('./application.js')).to.be["true"];
      });
      it('should return false for file in npm module called from non npm module', function() {
        info = new Info(path.resolve(dir + '/..'));
        return expect(info.isFileInModule('./node_modules/simple/index.js')).to.be["false"];
      });
      it('should return true for file from npm module', function() {
        info = new Info(dir + '/simple');
        return expect(info.isFileInModule('./index.js')).to.be["true"];
      });
      return it('should return false for file in submodule of npm module', function() {
        info = new Info(dir + '/advanced');
        return expect(info.isFileInModule('./node_modules/another/index.js')).to.be["false"];
      });
    });
  });

}).call(this);
